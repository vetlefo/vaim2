version: '3.8'

services:
  auth-service:
    build: ./services/auth-service
    ports:
      - "3001:3000"
    depends_on:
      - auth-postgres
      - auth-neo4j
    environment:
      NODE_ENV: development
      DB_HOST: auth-postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      DB_NAME: ${POSTGRES_DB:-auth}
      NEO4J_URI: bolt://auth-neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password123}
    networks:
      - auth-network

  graph-analytics-service:
    build: ./services/graph-analytics-service
    ports:
      - "3002:3002"
    depends_on:
      - auth-neo4j
      - kafka
      - redis
    environment:
      NODE_ENV: development
      PORT: 3002
      NEO4J_URI: bolt://auth-neo4j:7687
      NEO4J_USERNAME: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password123}
      NEO4J_DATABASE: neo4j
      KAFKA_BROKERS: kafka:9092
      KAFKA_CLIENT_ID: graph-analytics-service
      KAFKA_GROUP_ID: graph-analytics-group
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
    networks:
      - auth-network
      - analytics-network

  auth-postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: ${POSTGRES_DB:-auth}
    ports:
      - "5433:5432"  # Changed from 5432 to avoid conflicts
    volumes:
      - auth-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-auth}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network

  auth-neo4j:
    image: neo4j:5-enterprise
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password123}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_security_procedures_unrestricted: "gds.*"
      NEO4J_dbms_security_procedures_whitelist: "gds.*"
    ports:
      - "7475:7474"  # Changed from 7474 to avoid conflicts
      - "7688:7687"  # Changed from 7687 to avoid conflicts
    volumes:
      - auth-neo4j-data:/data
      - ./neo4j/plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network
      - analytics-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"  # Changed from 9092 to avoid conflicts
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - analytics-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2182:2181"  # Changed from 2181 to avoid conflicts
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - analytics-network

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Changed from 6379 to avoid conflicts
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - analytics-network

volumes:
  auth-postgres-data:
  auth-neo4j-data:
  redis-data:

networks:
  auth-network:
    driver: bridge
  analytics-network:
    driver: bridge
