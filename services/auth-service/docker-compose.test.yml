version: '3.8'

services:
  auth-postgres-test:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: test_auth
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U test']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - auth-postgres-test-data:/var/lib/postgresql/data
    networks:
      - auth-test-network

  auth-neo4j-test:
    image: neo4j:4.4
    environment:
      NEO4J_AUTH: neo4j/test
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
    ports:
      - '7474:7474'
      - '7687:7687'
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    volumes:
      - auth-neo4j-test-data:/data
    networks:
      - auth-test-network

  auth-redis-test:
    image: redis:7-alpine
    command: redis-server --appendonly no --save ""
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - auth-test-network

  mock-oauth-google:
    build:
      context: ./test/mock-oauth
      args:
        PROVIDER: google
    environment:
      PORT: 3000
      CLIENT_ID: test-google-client-id
      CLIENT_SECRET: test-google-client-secret
    ports:
      - "3010:3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/.well-known/openid-configuration"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - auth-test-network

  mock-oauth-github:
    build:
      context: ./test/mock-oauth
      args:
        PROVIDER: github
    environment:
      PORT: 3000
      CLIENT_ID: test-github-client-id
      CLIENT_SECRET: test-github-client-secret
    ports:
      - "3011:3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/login/oauth/authorize"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - auth-test-network

  auth-service:
    build: .
    environment:
      DB_HOST: auth-postgres-test
      DB_PORT: 5432
      DB_USER: test
      DB_PASSWORD: test
      DB_NAME: test_auth
      NEO4J_URI: bolt://auth-neo4j-test:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: test
      REDIS_HOST: auth-redis-test
      REDIS_PORT: 6379
      GOOGLE_CLIENT_ID: test-google-client-id
      GOOGLE_CLIENT_SECRET: test-google-client-secret
      GOOGLE_CALLBACK_URL: http://localhost:3002/auth/google/callback
      GOOGLE_AUTH_URL: http://mock-oauth-google:3000/o/oauth2/v2/auth
      GOOGLE_TOKEN_URL: http://mock-oauth-google:3000/oauth2/v4/token
      GOOGLE_USERINFO_URL: http://mock-oauth-google:3000/oauth2/v3/userinfo
      GITHUB_CLIENT_ID: test-github-client-id
      GITHUB_CLIENT_SECRET: test-github-client-secret
      GITHUB_CALLBACK_URL: http://localhost:3002/auth/github/callback
      GITHUB_AUTH_URL: http://mock-oauth-github:3000/login/oauth/authorize
      GITHUB_TOKEN_URL: http://mock-oauth-github:3000/login/oauth/access_token
      GITHUB_USER_URL: http://mock-oauth-github:3000/api/v3/user
      JWT_SECRET: test-jwt-secret
      NODE_ENV: test
    depends_on:
      auth-postgres-test:
        condition: service_healthy
      auth-neo4j-test:
        condition: service_healthy
      auth-redis-test:
        condition: service_healthy
      mock-oauth-google:
        condition: service_healthy
      mock-oauth-github:
        condition: service_healthy
    ports:
      - '3002:3001'
    networks:
      - auth-test-network

volumes:
  auth-postgres-test-data:
  auth-neo4j-test-data:

networks:
  auth-test-network:
    driver: bridge